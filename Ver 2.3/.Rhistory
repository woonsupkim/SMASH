)
)
}
}
# ___set losses----
output$setL0_A <- renderUI(setL(1,1))
output$setL1_A <- renderUI(setL(2,1))
output$setL2_A <- renderUI(setL(3,1))
output$setL0_B <- renderUI(setL(1,2))
output$setL1_B <- renderUI(setL(2,2))
output$setL2_B <- renderUI(setL(3,2))
# >>>>>>>>>>>>>>>>----
# _event simulate slow----
observeEvent(
eventExpr = input$simSlow2,
if (plyr3$id[1] != '0a') {
us$m <- 1
# sim$m <- sim$m + 1
# determine who serves first
mtch$srv <- sample(1:2, 1)
mtch$rtn <- ifelse(mtch$srv == 1, 2, 1)
observe(
{
invalidateLater(20, session) # millisecs each iteration
isolate(
while (mtch$status) {
mtch$p <- mtch$p + 1
# temp variables for game and set statuses
gOver <- FALSE
sOver <- FALSE
# play point
r1 <- runif(1)
if (plyr3$p[1, mtch$srv] > r1) { # first serve in
r12 <- runif(1)
if (plyr3$p[3, mtch$rtn] > r12) { # return first serve in
r13 <- runif(1)
if (plyr3$p[5, mtch$srv] > r13) { # point won by srv
plusLog(mtch$srv)
mtch$pts[mtch$srv] <- mtch$pts[mtch$srv] + 1
} else { # point won by rtn
plusLog(mtch$rtn)
mtch$pts[mtch$rtn] <- mtch$pts[mtch$rtn] + 1
}
} else { # point won by srv
plusLog(mtch$srv)
mtch$pts[mtch$srv] <- mtch$pts[mtch$srv] + 1
}
} else { # first serve out
r2 <- runif(1)
if (plyr3$p[2, mtch$srv] > r2) { # second serve in
r22 <- runif(1)
if (plyr3$p[4, mtch$rtn] > r22) { # return second serve in
r23 <- runif(1)
if (plyr3$p[5, mtch$srv] > r23) { # point won by srv
plusLog(mtch$srv)
mtch$pts[mtch$srv] <- mtch$pts[mtch$srv] + 1
} else { # point won by rtn
plusLog(mtch$rtn)
mtch$pts[mtch$rtn] <- mtch$pts[mtch$rtn] + 1
}
} else { # point won by srv
plusLog(mtch$srv)
mtch$pts[mtch$srv] <- mtch$pts[mtch$srv] + 1
}
} else { # second serve out aka double fault; point won by rtn
plusLog(mtch$rtn)
mtch$pts[mtch$rtn] <- mtch$pts[mtch$rtn] + 1
}
}
# __is game over?----
if (mtch$pts[mtch$srv] == 4) {
mtch$gms[mtch$srv] <- mtch$gms[mtch$srv] + 1
mtch$setGms[mtch$s, mtch$srv] <- mtch$setGms[mtch$s, mtch$srv] + 1
mtch$pts <- c(0, 0)
gOver <- TRUE
} else if (mtch$pts[mtch$rtn] == 4) {
mtch$gms[mtch$rtn] <- mtch$gms[mtch$rtn] + 1
mtch$setGms[mtch$s, mtch$rtn] <- mtch$setGms[mtch$s, mtch$rtn] + 1
mtch$pts <- c(0, 0)
gOver <- TRUE
}
# __is set over?----
if (gOver) {
# if server reaches 6
if (mtch$gms[mtch$srv] == 6) {
# if return is 4 or less
if (mtch$gms[mtch$rtn] < 5) {
mtch$sts[mtch$srv] <- mtch$sts[mtch$srv] + 1
mtch$gms <- c(0, 0)
mtch$s <- mtch$s + 1
} else {
r6 <- runif(1)
if (r6 < 0.75) {
r7 <- runif(1)
if (r7 < 0.33) {
mtch$setGms[mtch$s, mtch$rtn] <- 6
}
mtch$setGms[mtch$s, mtch$srv] <- 7
mtch$sts[mtch$srv] <- mtch$sts[mtch$srv] + 1
mtch$gms <- c(0, 0)
mtch$s <- mtch$s + 1
} else {
mtch$setGms[mtch$s, mtch$rtn] <- 7
mtch$sts[mtch$rtn] <- mtch$sts[mtch$rtn] + 1
mtch$gms <- c(0, 0)
mtch$s <- mtch$s + 1
}
}
sOver <- TRUE
} else if (mtch$gms[mtch$rtn] == 6) {
if (mtch$gms[mtch$srv] < 5) {
mtch$sts[mtch$rtn] <- mtch$sts[mtch$rtn] + 1
mtch$gms <- c(0, 0)
mtch$s <- mtch$s + 1
} else {
r6 <- runif(1)
if (r6 < 0.75) {
r7 <- runif(1)
if (r7 < 0.33) {
mtch$setGms[mtch$s, mtch$srv] <- 6
}
mtch$setGms[mtch$s, mtch$rtn] <- 7
mtch$sts[mtch$rtn] <- mtch$sts[mtch$rtn] + 1
mtch$gms <- c(0, 0)
mtch$s <- mtch$s + 1
} else {
mtch$setGms[mtch$s, mtch$srv] <- 7
mtch$sts[mtch$srv] <- mtch$sts[mtch$srv] + 1
mtch$gms <- c(0, 0)
mtch$s <- mtch$s + 1
}
}
sOver <- TRUE
}
}
# __is match over?----
if (sOver) {
if (mtch$sts[mtch$srv] == 3) {
mtch$status = FALSE
# sim$w[mtch$srv] <- sim$w[mtch$srv] + 1
# sl <- mtch$sts[mtch$rtn]
# sim$l[sl+1, mtch$srv] <- sim$l[sl+1, mtch$srv] + 1
# sim$lm <- max(sim$l)
} else if (mtch$sts[mtch$rtn] == 3) {
mtch$status = FALSE
# sim$w[mtch$rtn] <- sim$w[mtch$rtn] + 1
# sl <- mtch$sts[mtch$srv]
# sim$l[sl+1, mtch$rtn] <- sim$l[sl+1, mtch$rtn] + 1
# sim$lm <- max(sim$l)
}
}
# swap service
if (gOver) {
mtch$srv <- ifelse(mtch$srv == 1, 2, 1)
mtch$rtn <- ifelse(mtch$rtn == 1, 2, 1)
}
}
)
}
)
}  else {
sendSweetAlert(
session = session,
title = 'No Players',
text = 'Select the players before simulating match results.',
html = TRUE,
type = 'error'
)
}
)
plusLog <- function(ab) {
mlog$x <- mlog$x %>%
bind_rows(
tibble(
i = mlog$x$i[nrow(mlog$x)] + 1,
g = sum(mtch$gms) + 1,
s = sum(mtch$sts) + 1,
w = switch(ab, plyr3$nm[1], plyr3$nm[2]),
srv = switch(mtch$srv, plyr3$nm[1], plyr3$nm[2])
)
)
}
# >>>>>>>>>>>>>>>>----
# _event simulate fast----
observeEvent(
eventExpr = input$simFast2,
if (plyr3$id[1] != '0a') {
us$m <- 2
sim$m <- sim$m + 1
observe(
{
invalidateLater(20, session) # millisecs each iteration
isolate(
# if (sim$i < as.numeric(input$nSim)) {
if (sim$i < sim$m * sim$n) {
sim$i <- sim$i + 1
# reset match
mtch$p = 0
mtch$s = 1
mtch$status = TRUE
mtch$pts = c(0, 0)
mtch$gms = c(0, 0)
mtch$sts = c(0, 0)
mtch$setGms = matrix(c(rep(0, 10)), nrow = 5)
while (mtch$status) {
mtch$p <- mtch$p + 1
# temp variables for game and set statuses
gOver <- FALSE
sOver <- FALSE
# determine who serves first
if (mtch$p == 1) {
mtch$srv <- sample(1:2, 1)
mtch$rtn <- ifelse(mtch$srv == 1, 2, 1)
}
# play point
r1 <- runif(1)
if (plyr3$p[1, mtch$srv] > r1) { # first serve in
r12 <- runif(1)
if (plyr3$p[3, mtch$rtn] > r12) { # return first serve in
r13 <- runif(1)
if (plyr3$p[5, mtch$srv] > r13) { # point won by srv
mtch$pts[mtch$srv] <- mtch$pts[mtch$srv] + 1
} else { # point won by rtn
mtch$pts[mtch$rtn] <- mtch$pts[mtch$rtn] + 1
}
} else { # point won by srv
mtch$pts[mtch$srv] <- mtch$pts[mtch$srv] + 1
}
} else { # first serve out
r2 <- runif(1)
if (plyr3$p[2, mtch$srv] > r2) { # second serve in
r22 <- runif(1)
if (plyr3$p[4, mtch$rtn] > r22) { # return second serve in
r23 <- runif(1)
if (plyr3$p[5, mtch$srv] > r23) { # point won by srv
mtch$pts[mtch$srv] <- mtch$pts[mtch$srv] + 1
} else { # point won by rtn
mtch$pts[mtch$rtn] <- mtch$pts[mtch$rtn] + 1
}
} else { # point won by srv
mtch$pts[mtch$srv] <- mtch$pts[mtch$srv] + 1
}
} else { # second serve out aka double fault; point won by rtn
mtch$pts[mtch$rtn] <- mtch$pts[mtch$rtn] + 1
}
}
# __is game over?----
if (mtch$pts[mtch$srv] == 4) {
mtch$gms[mtch$srv] <- mtch$gms[mtch$srv] + 1
mtch$setGms[mtch$s, mtch$srv] <- mtch$setGms[mtch$s, mtch$srv] + 1
mtch$pts <- c(0, 0)
gOver <- TRUE
} else if (mtch$pts[mtch$rtn] == 4) {
mtch$gms[mtch$rtn] <- mtch$gms[mtch$rtn] + 1
mtch$setGms[mtch$s, mtch$rtn] <- mtch$setGms[mtch$s, mtch$rtn] + 1
mtch$pts <- c(0, 0)
gOver <- TRUE
}
# __is set over?----
if (gOver) {
# if server reaches 6
if (mtch$gms[mtch$srv] == 6) {
# if return is 4 or less
if (mtch$gms[mtch$rtn] < 5) {
mtch$sts[mtch$srv] <- mtch$sts[mtch$srv] + 1
mtch$gms <- c(0, 0)
mtch$s <- mtch$s + 1
} else {
r6 <- runif(1)
if (r6 < 0.75) {
r7 <- runif(1)
if (r7 < 0.33) {
mtch$setGms[mtch$s, mtch$rtn] <- 6
}
mtch$setGms[mtch$s, mtch$srv] <- 7
mtch$sts[mtch$srv] <- mtch$sts[mtch$srv] + 1
mtch$gms <- c(0, 0)
mtch$s <- mtch$s + 1
} else {
mtch$setGms[mtch$s, mtch$rtn] <- 7
mtch$sts[mtch$rtn] <- mtch$sts[mtch$rtn] + 1
mtch$gms <- c(0, 0)
mtch$s <- mtch$s + 1
}
}
sOver <- TRUE
} else if (mtch$gms[mtch$rtn] == 6) {
if (mtch$gms[mtch$srv] < 5) {
mtch$sts[mtch$rtn] <- mtch$sts[mtch$rtn] + 1
mtch$gms <- c(0, 0)
mtch$s <- mtch$s + 1
} else {
r6 <- runif(1)
if (r6 < 0.75) {
r7 <- runif(1)
if (r7 < 0.33) {
mtch$setGms[mtch$s, mtch$srv] <- 6
}
mtch$setGms[mtch$s, mtch$rtn] <- 7
mtch$sts[mtch$rtn] <- mtch$sts[mtch$rtn] + 1
mtch$gms <- c(0, 0)
mtch$s <- mtch$s + 1
} else {
mtch$setGms[mtch$s, mtch$srv] <- 7
mtch$sts[mtch$srv] <- mtch$sts[mtch$srv] + 1
mtch$gms <- c(0, 0)
mtch$s <- mtch$s + 1
}
}
sOver <- TRUE
}
}
# __is match over?----
if (sOver) {
if (mtch$sts[mtch$srv] == 3) {
mtch$status = FALSE
sim$w[mtch$srv] <- sim$w[mtch$srv] + 1
sl <- mtch$sts[mtch$rtn]
sim$l[sl+1, mtch$srv] <- sim$l[sl+1, mtch$srv] + 1
sim$lm <- max(sim$l)
} else if (mtch$sts[mtch$rtn] == 3) {
mtch$status = FALSE
sim$w[mtch$rtn] <- sim$w[mtch$rtn] + 1
sl <- mtch$sts[mtch$srv]
sim$l[sl+1, mtch$rtn] <- sim$l[sl+1, mtch$rtn] + 1
sim$lm <- max(sim$l)
}
# if (!mtch$status) {
#   sim$x <- sim$x %>%
#     bind_rows(
#       tibble(
#         i =sim$i,
#         as1 = mtch$setGms[1,1],
#         as2 = mtch$setGms[2,1],
#         as3 = mtch$setGms[3,1],
#         as4 = mtch$setGms[4,1],
#         as5 = mtch$setGms[5,1],
#         bs1 = mtch$setGms[1,2],
#         bs2 = mtch$setGms[2,2],
#         bs3 = mtch$setGms[3,2],
#         bs4 = mtch$setGms[4,2],
#         bs5 = mtch$setGms[5,2]
#       )
#     )
# }
}
# swap service
if (gOver) {
mtch$srv <- ifelse(mtch$srv == 1, 2, 1)
mtch$rtn <- ifelse(mtch$rtn == 1, 2, 1)
}
}
} else {
# write_csv(
#   x = sim$x,
#   file = '_stuff/sim_results.csv'
# )
}
)
}
)
} else {
sendSweetAlert(
session = session,
title = 'No Players',
text = 'Select the players before simulating match results.',
html = TRUE,
type = 'error'
)
}
)
# _event reset----
observeEvent(
eventExpr = input$reset2,
{
us$m = 0
sim$i = 0
sim$m = 0
sim$w = c(0,0)
sim$l = matrix(rep(0,6), nrow = 3)
mtch$p = 0
mtch$s = 1
mtch$srv = NULL
mtch$rtn = NULL
mtch$status = TRUE
mtch$pts = c(0, 0)
mtch$gms = c(0, 0)
mtch$sts = c(0, 0)
mtch$setGms = matrix(
c(rep(0, 10)),
nrow = 5
)
plyr3$id = c('0a', '0b')
plyr3$nm = c(NULL, NULL)
updatePickerInput(
session = session,
inputId = 'plyrA2',
selected = NULL
)
updatePickerInput(
session = session,
inputId = 'plyrB2',
selected = NULL
)
}
)
####################################################################################################################################################################################################################################################################
# >>>>>>>>>>>>>>>>----
# ui abou page----
output$uiAbou <- renderUI(
if (input$tabs == 3) {
div(
align = 'center',
div(
align = 'center',
style = 'padding:80px 10% 0 10%;',
h3(
style = 'color:lime;',
'The Development Team'
),
p('Click on an image to view the member\'s bio.'),
fluidRow(
lapply(
1:6,
function(i) {
column(
width = 2,
style = 'padding:3px;',
tags$button(
id = paste0('memBio', i),
class = 'btn action-button',
style = 'background-color:rgba(0,0,0,0);',
img(
src = paste0('mem', i, '.png'),
width = '100%',
style = paste0(
'border:solid ',
ifelse(sm$mb == i, 'orange  ', 'white '),
'5px; border-radius:50%;'
)
)
),
h5(
style = paste0(
'color:',
ifelse(sm$mb == i, 'orange;', 'white;')
),
mem1[i]
)
)
}
)
)
),
uiOutput('uiBio')
)
}
)
# event mem bttns----
observeEvent(input$memBio1, {sm$mb <- ifelse(sm$mb == 1, 0, 1)})
observeEvent(input$memBio2, {sm$mb <- ifelse(sm$mb == 2, 0, 2)})
observeEvent(input$memBio3, {sm$mb <- ifelse(sm$mb == 3, 0, 3)})
observeEvent(input$memBio4, {sm$mb <- ifelse(sm$mb == 4, 0, 4)})
observeEvent(input$memBio5, {sm$mb <- ifelse(sm$mb == 5, 0, 5)})
observeEvent(input$memBio6, {sm$mb <- ifelse(sm$mb == 6, 0, 6)})
# ui bio----
output$uiBio <- renderUI(
if (sm$mb > 0) {
div(
style = 'padding:5vh 20% 0 20%;',
wellPanel(
style = paste0(
'background-color:rgba(50,50,50,0.5); ',
'border:solid orange 2px;'
),
h3(
style = 'color:orange; margin-bottom:30px;',
member[sm$mb]
),
# hr(),
HTML(bio[sm$mb]),
# br(),
tags$a(
href = paste0(
'https://www.linkedin.com/in/', lnkdin[sm$mb], '/'
),
target = '_blank',
img(
src = 'linkedin.png',
width = '40px'
)
)
)
)
}
)
}
runApp('C:/Users/Woon/Desktop/Columbia/Applied Analytics/Term3/6. SMASH/Ver 2.3')
runApp('C:/Users/Woon/Desktop/Columbia/Applied Analytics/Term3/6. SMASH/Ver 2.3')
shiny::runApp('C:/Users/Woon/Desktop/Columbia/Applied Analytics/Term3/6. SMASH/Ver 2.3')
runApp('C:/Users/Woon/Desktop/Columbia/Applied Analytics/Term3/6. SMASH/Ver 2.3')
runApp('C:/Users/Woon/Desktop/Columbia/Applied Analytics/Term3/6. SMASH/Ver 2.3')
shiny::runApp('C:/Users/Woon/Desktop/Columbia/Applied Analytics/Term3/6. SMASH/Ver 2.3')
runApp('C:/Users/Woon/Desktop/Columbia/Applied Analytics/Term3/6. SMASH/Ver 2.3')
shiny::runApp('C:/Users/Woon/Desktop/Columbia/Applied Analytics/Term3/6. SMASH/Ver 2.3')
runApp('C:/Users/Woon/Desktop/Columbia/Applied Analytics/Term3/6. SMASH/Ver 2.3')
runApp('C:/Users/Woon/Desktop/Columbia/Applied Analytics/Term3/6. SMASH/Ver 2.3')
runApp('C:/Users/Woon/Desktop/Columbia/Applied Analytics/Term3/6. SMASH/Ver 2.3')
runApp('C:/Users/Woon/Desktop/Columbia/Applied Analytics/Term3/6. SMASH/Ver 2.3')
runApp('C:/Users/Woon/Desktop/Columbia/Applied Analytics/Term3/6. SMASH/Ver 2.3')
shiny::runApp('C:/Users/Woon/Desktop/Columbia/Applied Analytics/Term3/6. SMASH/Ver 2.3')
runApp('C:/Users/Woon/Desktop/Columbia/Applied Analytics/Term3/6. SMASH/Ver 2.3')
